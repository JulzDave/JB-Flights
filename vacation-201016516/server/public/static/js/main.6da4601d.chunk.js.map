{"version":3,"sources":["comp/Login.js","comp/Header.js","comp/Register.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","username","password","react_default","a","createElement","className","type","name","onChange","this","handler","bind","value","onClick","prophasAccount","ev","setState","Object","defineProperty","target","props","hasAccount","Component","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","Register","firstname","lastname","regUsername","regPassword","registerBtn","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","resp","json","alert","App","comp_Header","comp_Login","comp_Register","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6da4601d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Login extends Component {\n  state={\n    username:\"\",\n    password:\"\"\n  }\n  render() {\n    return (\n      <div className=\"LoginCont\">\n       <div className=\"Login\">\n       <br/><br/>\n       <p className=\"loghead\">Login</p><br/><br/>\n       <span className=\"loginfo\">&nbsp;&nbsp;&nbsp;&nbsp;Username: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n       <input className=\"logInput\" type=\"text\" name=\"username\" onChange={this.handler.bind(this)} value={this.state.username}></input></span><br/><br/>\n       <span className=\"loginfo\">&nbsp;&nbsp;&nbsp;&nbsp;Password:&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n       <input className=\"logInput\" type=\"password\" name=\"password\" onChange={this.handler.bind(this)} value={this.state.password}></input></span><br/><br/><br/>\n       <button type=\"button\" className=\"btn btn-warning btn-sign-in\">Sign In</button>\n       <div className=\"noAccount\" onClick={this.prophasAccount.bind(this)}>I don't have an account</div>\n       </div>\n      </div>\n    );\n  }\n\n  handler(ev){\n    this.setState({[ev.target.name]:ev.target.value})\n  }\n\n  prophasAccount(){\n    this.props.hasAccount();\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Header extends Component {\n  render() {\n    return (\n        <header className=\"App\">\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n  <a className=\"navbar-brand\" href=\"##\"><font className=\"logo\"><font className=\"darkorange\">C</font>loud<font className=\"darkorange\">R</font>ider</font></a>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item active\">\n        <a className=\"nav-link\" href=\"##\">Home <span className=\"sr-only\">(current)</span></a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"##\">Features</a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"##\">Pricing</a>\n      </li>\n      <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" href=\"##\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          Dropdown link\n        </a>\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n          <a className=\"dropdown-item\" href=\"##\">Action</a>\n          <a className=\"dropdown-item\" href=\"##\">Another action</a>\n          <a className=\"dropdown-item\" href=\"##\">Something else here</a>\n        </div>\n      </li>\n    </ul>\n  </div>\n</nav>\n        </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Register extends Component {\n  state={\n    firstname:\"\",\n    lastname:\"\",\n    regUsername:\"\",\n    regPassword:\"\"\n  }\n  render() {\n    return (\n      <div className=\"LoginCont\">\n       <div className=\"Login Register\">\n       <br/><br/>\n       <p className=\"loghead\">Register</p><br/><br/>\n       <span className=\"loginfo\">&nbsp;&nbsp;&nbsp;&nbsp;Firstname: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n       <input className=\"logInput\" type=\"text\" name=\"firstname\" onChange={this.handler.bind(this)} value={this.state.firstname}></input></span><br/><br/>\n       <span className=\"loginfo\">&nbsp;&nbsp;&nbsp;&nbsp;Lastname:&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n       <input className=\"logInput\" type=\"text\" name=\"lastname\" onChange={this.handler.bind(this)} value={this.state.lastname}></input></span><br/><br/><br/>\n       <span className=\"loginfo\">&nbsp;&nbsp;&nbsp;&nbsp;Username: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n       <input className=\"logInput\" type=\"text\" name=\"regUsername\" onChange={this.handler.bind(this)} value={this.state.regUsername}></input></span><br/><br/>\n       <span className=\"loginfo\">&nbsp;&nbsp;&nbsp;&nbsp;Password:&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n       <input className=\"logInput\" type=\"password\" name=\"regPassword\" onChange={this.handler.bind(this)} value={this.state.regPassword}></input></span><br/><br/><br/>\n       <button type=\"button\" className=\"btn btn-warning btn-sign-in\" onClick={this.registerBtn.bind(this)}>Register</button>\n       <div className=\"noAccount\" onClick={this.prophasAccount.bind(this)}>I already have an account</div>\n       </div>\n      </div>\n    );\n  }\n\n  handler(ev){\n    this.setState({[ev.target.name]:ev.target.value})\n  }\n\n  prophasAccount(){\n    this.props.hasAccount();\n  }\n\n  async registerBtn(){\n\n    let resp = await fetch('http://localhost:3000/register', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n    });\n    // eslint-disable-next-line\n    let data = await resp.json();\n   \n    alert(\"thanks for registering \"+this.state.firstname)\n  }\n}\n\nexport default Register;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './comp/Login';\nimport Header from './comp/Header';\nimport Register from './comp/Register';\n\nclass App extends Component {\n  state={\n    hasAccount:true\n  }\n  render() {\n    \n    if(this.state.hasAccount){\n    return (\n      <div className=\"App\">\n      \n        <Header/>\n        <Login hasAccount={this.hasAccount.bind(this)} />\n      </div>\n    );\n  }\n    return (\n      <div className=\"App\">\n      \n        <Header/>\n        <Register hasAccount={this.hasAccount.bind(this)} />\n      </div>\n    );\n  }\n\n  hasAccount(){\n  \n    this.setState({hasAccount:!this.state.hasAccount})\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}